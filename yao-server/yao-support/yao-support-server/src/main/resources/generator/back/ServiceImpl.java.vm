package ${package}.${moduleName}.server.impl;

import com.y3tu.tool.web.base.pojo.Page;
import ${package}.${moduleName}.client.mapper.${className}Mapper;
import ${package}.${moduleName}.client.entity.${className};
import ${package}.${moduleName}.client.service.${className}Service;
import com.y3tu.tool.web.base.service.impl.BaseServiceImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;



/**
 * ${remarks} service实现类
 *
 * @author ${author}
 */
@Service("${className}Service")
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true, rollbackFor = Exception.class)
public class ${className}ServiceImpl extends BaseServiceImpl<${className}Mapper, ${className}> implements ${className}Service {

    @Override
    public Page<${className}> find${className}Page(Page<${className}> page) {
        return this.page(page);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void create${className}(${className} ${caseClassName}) {
        ${caseClassName}.setCreateTime(new Date());
        ${caseClassName}.setModifyTime(new Date());
        this.saveBySnowflakeId(${caseClassName});
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${className}(${className} ${caseClassName}) {
        ${caseClassName}.setModifyTime(new Date());
        this.updateById(${caseClassName});
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${className}(String[] ids) {
        this.removeByIds(Arrays.asList(ids));
    }

}
